{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nconst config = {\n  headers: {// value: 111\n  },\n  withCredentials: true,\n  timeout: 6000\n};\naxios.defaults.withCredentials = true;\nlet Axios = axios.create(config);\nAxios.interceptors.request.use(config => {\n  console.log(config); // config.headers.id = 'test'\n\n  config.headers = _objectSpread(_objectSpread({}, config.headers), {}, {\n    token: 'wang'\n  });\n  return config;\n}, err => {\n  console.log(err, 111);\n});\nAxios.interceptors.response.use(response => {\n  if (response.status === 200) {\n    return Promise.resolve(response.data);\n  }\n\n  return Promise.reject('请求错误');\n});\nexport default Axios;","map":null,"metadata":{},"sourceType":"module"}